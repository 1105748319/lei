spring.application.name=istranstation
server.port=8100
server.servlet.context-path=/app
#es配置
es.ip=127.0.0.1
es.cluster.name=lei

#kafka
KAFKA.TOPIC.TEST=TEST

spring.kafka.bootstrap-servers: 127.0.0.1:9092
spring.kafka.producer.batch-size: 16
spring.kafka.producer.retries: 0
#spring.kafka.ma
spring.kafka.producer.buffer-memory: 33554432
spring.kafka.producer.key-serializer: org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer: org.apache.kafka.common.serialization.StringSerializer


com.atomikos.icatch.max_actives = -1

com.atomikos.icatch.max_timeout = 10000

com.atomikos.icatch.console_log_level=WARN


#
#表示Eureka客户端需要发送心跳到eureka服务器的频率(以秒为单位)，以表明它仍然存在。
eureka.instance.lease-renewal-interval-in-seconds=5
#设置多长时间意味着租约到期，默认90
eureka.instance.lease-expiration-duration-in-seconds=10
#多长时间从Eureka Server注册表获取一次数据，默认30s
eureka.client.registry-fetch-interval-seconds=30

eureka.client.register-with-eureka: false
spring.cloud.service-registry.auto-registration.enabled=false

#实例名以IP
eureka.instance.prefer-ip-address=true
#是否允许向Eureka Server注册信息，默认true,如果是服务器端，应该设置为false
# 是否允许客户端向Eureka 注册表获取信息，一般服务器为设置为false,客户端设置为true
eureka.client.fetch-registry=true
#服务发现地址
eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/
#开启优雅关闭方式
endpoints.shutdown.enabled=true
#关闭安全认证
management.security.enabled=false
management.endpoint.web.exposure.include="*"
#最大连接数
server.tomcat.max-connections=10000
#初始值
server.tomcat.min-spare-threads=50
#最大线程数
server.tomcat.max-threads=500
#编码方式
server.tomcat.uri-encoding=UTF-8
#post提交数据最大大小，设置为0不限制
server.tomcat.max-http-post-size=0
#超时时间设置
server.connection-timeout=6000
#排队
server.tomcat.accept-count=100

#主库
spring.datasource.master.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.master.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.master.url=jdbc:mysql://localhost:3306/lei?useSSL=false&useUnicode=true&characterEncoding=UTF-8&useAffectedRows=true
spring.datasource.master.username=root
spring.datasource.master.password=Aa918620^
# druid参数调优（可选）
# 初始化大小，最小，最大
spring.datasource.master.initialSize=10
spring.datasource.master.minIdle=10
spring.datasource.master.maxActive=30
# 配置获取连接等待超时的时间
spring.datasource.master.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.master.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.master.minEvictableIdleTimeMillis=300000
# 测试连接
spring.datasource.master.testWhileIdle=true
spring.datasource.master.testOnBorrow=false
spring.datasource.master.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.master.poolPreparedStatements=true
spring.datasource.master.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters
spring.datasource.master.filters=stat
# asyncInit是1.1.4中新增加的配置，如果有initialSize数量较多时，打开会加快应用启动时间
spring.datasource.master.asyncInit=true

#从库



#主库
spring.datasource.slave.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.slave.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.slave.url=jdbc:mysql://localhost:3306/lei_slave?useSSL=false&useUnicode=true&characterEncoding=UTF-8&useAffectedRows=true
spring.datasource.slave.username=root
spring.datasource.slave.password=Aa918620^
# druid参数调优（可选）
# 初始化大小，最小，最大
spring.datasource.slave.initialSize=10
spring.datasource.slave.minIdle=10
spring.datasource.slave.maxActive=30
# 配置获取连接等待超时的时间
spring.datasource.slave.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
spring.datasource.slave.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.slave.minEvictableIdleTimeMillis=300000
# 测试连接
spring.datasource.slave.testWhileIdle=true
spring.datasource.slave.testOnBorrow=false
spring.datasource.slave.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.slave.poolPreparedStatements=true
spring.datasource.slave.maxPoolPreparedStatementPerConnectionSize=20
# 配置监控统计拦截的filters
spring.datasource.slave.filters=stat
# asyncInit是1.1.4中新增加的配置，如果有initialSize数量较多时，打开会加快应用启动时间
spring.datasource.slave.asyncInit=true

